# Task ID: 13
# Title: Align URL Generation Algorithm
# Status: done
# Dependencies: 11, 12
# Priority: high
# Description: Ensure URL generation is consistent between n8n workflow and API endpoints by implementing identical slug generation algorithms.
# Details:
1. Create a shared utility function for slug generation that matches n8n's algorithm exactly:

```javascript
// utils/slugUtils.js
export function generateSlug(companyName) {
  if (!companyName) return '';
  
  return companyName
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-|-$/g, '');
}

export function generateDemoUrl(companyName) {
  const slug = generateSlug(companyName);
  return `https://solarbookers.com/${slug}`;
}
```

2. Update all API endpoints to use this shared utility:

```javascript
// pages/api/create-prototype.js
import { generateSlug, generateDemoUrl } from '../../utils/slugUtils';

export default async function handler(req, res) {
  try {
    const companyName = req.body.companyName || req.body.company_name || req.body.company;
    // ... other field extractions
    
    const companySlug = generateSlug(companyName);
    const demoUrl = generateDemoUrl(companyName);
    
    // ... rest of function
  } catch (error) {
    // ... error handling
  }
}
```

3. Update the demo page to use the same slug parsing:

```javascript
// pages/[companySlug].js
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';

export default function CompanyDemo() {
  const router = useRouter();
  const { companySlug } = router.query;
  const [assistantId, setAssistantId] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    if (!companySlug) return;
    
    async function fetchAssistant() {
      try {
        const response = await fetch(`/api/company-assistant?companySlug=${companySlug}`);
        const data = await response.json();
        
        if (!response.ok) {
          throw new Error(data.error || 'Failed to load assistant');
        }
        
        setAssistantId(data.assistantId);
      } catch (error) {
        console.error('Error loading assistant:', error);
        setError(error.message);
      } finally {
        setLoading(false);
      }
    }
    
    fetchAssistant();
  }, [companySlug]);
  
  // ... rest of component
}
```

4. Create a test endpoint to validate URL generation consistency:

```javascript
// pages/api/test/url-generation.js
import { generateSlug, generateDemoUrl } from '../../../utils/slugUtils';

export default function handler(req, res) {
  const { companyName } = req.query;
  
  if (!companyName) {
    return res.status(400).json({ error: 'Company name is required' });
  }
  
  const slug = generateSlug(companyName);
  const demoUrl = generateDemoUrl(companyName);
  
  return res.status(200).json({
    companyName,
    slug,
    demoUrl
  });
}
```

# Test Strategy:
Test URL generation with a variety of company names, including those with special characters, spaces, and capitalization. Compare results with n8n-generated URLs to ensure they match exactly. Test edge cases like empty strings, very long names, and names with only special characters. Verify that demo URLs generated by both systems resolve to the same page.
