# Task ID: 9
# Title: Create Comprehensive Debug Endpoint
# Status: pending
# Dependencies: None
# Priority: high
# Description: Develop a debug endpoint that tests Redis connections, OpenAI API integration, and environment configuration to diagnose system issues.
# Details:
Create a new API route at `/api/debug` that performs the following checks:
1. Redis connection test - verify connection to Upstash Redis and ability to set/get values
2. OpenAI API validation - test connection to OpenAI and verify Assistant API functionality
3. Environment variable validation - check all required environment variables are present
4. URL generation test - validate slug generation algorithm

Implementation should include:
```javascript
// pages/api/debug.js
import { Redis } from '@upstash/redis'
import OpenAI from 'openai'

export default async function handler(req, res) {
  const results = {
    redis: { status: 'pending', details: null },
    openai: { status: 'pending', details: null },
    environment: { status: 'pending', details: null },
    urlGeneration: { status: 'pending', details: null }
  }
  
  // Test Redis connection
  try {
    const redis = new Redis({
      url: process.env.UPSTASH_REDIS_REST_URL,
      token: process.env.UPSTASH_REDIS_REST_TOKEN,
    })
    const testKey = 'debug-test-' + Date.now()
    await redis.set(testKey, 'test-value')
    const value = await redis.get(testKey)
    await redis.del(testKey)
    results.redis = { status: 'success', details: 'Connection successful' }
  } catch (error) {
    results.redis = { status: 'error', details: error.message }
  }
  
  // Test OpenAI connection
  try {
    const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY })
    const assistantsList = await openai.beta.assistants.list({ limit: 1 })
    results.openai = { status: 'success', details: 'API connection successful' }
  } catch (error) {
    results.openai = { status: 'error', details: error.message }
  }
  
  // Check environment variables
  const requiredVars = [
    'OPENAI_API_KEY',
    'UPSTASH_REDIS_REST_URL',
    'UPSTASH_REDIS_REST_TOKEN',
    // Add other required variables
  ]
  const missingVars = requiredVars.filter(varName => !process.env[varName])
  results.environment = missingVars.length === 0 
    ? { status: 'success', details: 'All required variables present' }
    : { status: 'error', details: `Missing variables: ${missingVars.join(', ')}` }
  
  // Test URL generation
  try {
    const testCompany = 'Test Company Name'
    const slug = testCompany.toLowerCase().replace(/[^a-z0-9]/g, '-')
    const url = `https://solarbookers.com/${slug}`
    results.urlGeneration = { status: 'success', details: `Generated URL: ${url}` }
  } catch (error) {
    results.urlGeneration = { status: 'error', details: error.message }
  }
  
  return res.status(200).json(results)
}
```

Create a simple UI at `/debug` to display these results in a user-friendly format.

# Test Strategy:
1. Manual testing of the debug endpoint by accessing `/api/debug` and verifying all checks run
2. Verify error detection by temporarily modifying environment variables
3. Test Redis connection validation by temporarily using invalid Redis credentials
4. Validate OpenAI API test by using both valid and invalid API keys
5. Ensure the endpoint returns appropriate HTTP status codes and error messages
