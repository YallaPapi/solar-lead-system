# Task ID: 10
# Title: Build Integration Test Suite Page
# Status: pending
# Dependencies: 9
# Priority: high
# Description: Create a test suite page to independently validate each integration point in the workflow, including n8n webhook handling, demo creation, and email generation.
# Details:
Develop a comprehensive test page at `/test-suite` with the following components:

1. Webhook simulation form that mimics n8n payload structure
2. Demo creation test that calls the `/api/create-prototype` endpoint
3. Assistant mapping test for `/api/company-assistant` endpoint
4. Chat functionality test for `/api/chat` endpoint
5. URL generation validator

Implementation:
```javascript
// pages/test-suite.js
import { useState } from 'react'
import axios from 'axios'

export default function TestSuite() {
  const [results, setResults] = useState({})
  const [loading, setLoading] = useState({})
  const [formData, setFormData] = useState({
    companyName: 'Test Solar Company',
    contactName: 'John Doe',
    email: 'test@example.com',
    phone: '555-123-4567',
    location: 'New York, NY'
  })

  const handleInputChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value })
  }

  const testWebhook = async () => {
    setLoading({ ...loading, webhook: true })
    try {
      // Simulate the n8n webhook payload structure
      const payload = {
        data: {
          company_name: formData.companyName,
          contact_name: formData.contactName,
          email: formData.email,
          phone: formData.phone,
          location: formData.location
        }
      }
      const response = await axios.post('/api/webhook', payload)
      setResults({ ...results, webhook: { status: 'success', data: response.data } })
    } catch (error) {
      setResults({ ...results, webhook: { status: 'error', message: error.message } })
    }
    setLoading({ ...loading, webhook: false })
  }

  const testDemoCreation = async () => {
    setLoading({ ...loading, demoCreation: true })
    try {
      const response = await axios.post('/api/create-prototype', {
        companyName: formData.companyName,
        contactName: formData.contactName,
        email: formData.email
      })
      setResults({ ...results, demoCreation: { status: 'success', data: response.data } })
    } catch (error) {
      setResults({ ...results, demoCreation: { status: 'error', message: error.message } })
    }
    setLoading({ ...loading, demoCreation: false })
  }

  // Add similar functions for testing other endpoints
  
  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Integration Test Suite</h1>
      
      {/* Form inputs */}
      <div className="mb-6 p-4 border rounded">
        <h2 className="text-xl mb-2">Test Data</h2>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block mb-1">Company Name</label>
            <input 
              type="text" 
              name="companyName" 
              value={formData.companyName} 
              onChange={handleInputChange}
              className="w-full p-2 border rounded"
            />
          </div>
          {/* Add other form fields */}
        </div>
      </div>
      
      {/* Test buttons and results */}
      <div className="grid grid-cols-2 gap-4">
        <div className="p-4 border rounded">
          <h2 className="text-xl mb-2">Webhook Test</h2>
          <button 
            onClick={testWebhook} 
            disabled={loading.webhook}
            className="px-4 py-2 bg-blue-500 text-white rounded"
          >
            {loading.webhook ? 'Testing...' : 'Test Webhook'}
          </button>
          {results.webhook && (
            <div className={`mt-4 p-2 rounded ${results.webhook.status === 'success' ? 'bg-green-100' : 'bg-red-100'}`}>
              <pre>{JSON.stringify(results.webhook, null, 2)}</pre>
            </div>
          )}
        </div>
        
        {/* Add other test sections */}
      </div>
    </div>
  )
}
```

# Test Strategy:
1. Test each integration point independently using the test suite page
2. Verify that the test suite correctly identifies issues with each endpoint
3. Test with various input combinations to ensure robust handling
4. Validate that the test suite accurately simulates the n8n workflow payload structure
5. Ensure the UI clearly displays success and error states for each test
